# variable definition
foo: "hello world"

# expression evaluation is right to left, no precedence
10 * 2 + 1
#> 30

# function examples
dist2: x y -> ((x^2) + y^2)^.5 # 2D distance
#> dist2: Num Num -> Num
# currying...
dist2 3
#> Num -> Num (y -> 9 + y^2)
# infix operators are simply regular curried functions
* 2
#> Num -> Num (x -> x * 2)
# so "func a b" is equivalent to "b func a"
dist: x -> (sum map (^2) x)^.5 # N-dimensional distance
#> dist: [Num] -> Num

# list append is also space, and ',' can separate list items
# so here's a list of lists:
lists: 1 2 3, 4 5 6, 7 8 9 10
lists 0 1
#> 1 2 3, 4 5 6
(zip lists) 1 
#> 2 5 8
zip lists
#> 1 4 7, 2 5 8, 3 6 9, Nil Nil 10

# in standard library
iterate: f x -> x, then iterate f, f x # "then" is lazy eval
for: s f -> map f s
zip: s -> map for s, 0 .. max count for s
# or equiv: zip: s -> map (s map) 0 .. max count for s, 

naturals = 0..Inf # infinite lists are fine thanks to sequence types
#> 0 1 3 3 5 6 7 8 9 10 …

# chunk a list L into a list of lists of n length
chunk: n s -> 0..n for iterate n..Inf, s
#> chunk: Int [X] -> [[X]]

# polymorphism and recursion example
zero = ""
zero = 0
zero = []
reduce 
reduce: f v1 [] -> v1
reduce: f v1 s -> f (reduce f, v1, s 1..Inf) s 0
reduce: f s -> reduce f zero s
# polymorphic reduce is matched to (A B -> A, [A]) or (A B -> A, B, [A])
reduce (+), 5 10 1 # polymorphic zero is matched against type of RHS of (+)
#> 16

# example using expression quoting for symbolic algebra for units
m:{m} s:{s} kg:{kg} k:{k} # meters seconds kilograms kelvins
acc:m/s^2 nwt:kg*acc jl:m*nwt wt:j/s # acceleration newton joule watt
earth-g = 9.8 * acc
earth-g * 1*kg * 10*m
#> 98 * jl # RFC: is reverse lookup magic for expression printing reasonable?

# TODO: examples of file operations and sequences
 
# examples of named tuples and tables

Name: first:Str last:Str [Str] # named tuple + list combo type

n1: Name first:'Abram' 'abe' 'quuxman' # skipping .last
#> Name 'Abram' …
n1 0, n1.first, n1.last, n1 2, n1 -1, n1 = 'Abram' Nil 'Abe' 'quuxman'
#> 'Abram' 'Abram' Nil 'abe' 'quuxman' true

Loc: Float Float
Person: name:Name loc:Loc skills:[Str]

p1: Person n1 last:'Clark', 37.79 -122.24, 'unicycling' 'juggling' 'coding'
#> Person (Name 'Abram' …) …
p2: Person 'JoJo' 'Weitz' 'Jordan' 'JW', 37.80 -122.29, 'acro' 'juggling' 'coding'
#> Person (Name 'JoJo' …) …
p3: Person 'Chad' 'Random', 39 123, 'coding' 'douchebaggery'
#> Person (Name 'Chad' …) …

# TODO: Table semantics needs work! Especially indexing
People: Table Person
  by-name: multikey name
  by-skill: multikey skills

# TODO: fix this after elegant indexing semantics
multikey: sym self -> Map flatten for self.sym i keys ->
  for (keys k -> k) self i
# above looks a bit awkward. In Python list comprehensions style
multikey: sym self -> Dict [k, self i for i, keys in self . sym for k in keys]

peeps = People p1 p2 p3
#> People Name .name | Loc .loc | [Str] .skills | …
#>   'Abram' … | 37.79 -122.24 | 'unicycling' 'juggling'
#>   'JoJo' …  | 37.80 -122.29 | 'acroyoga' 'juggling'
#>   'Chad' …  | 39 123        | 'coding' 'douchebaggery'
peeps.by-skill 'juggling'
#>   'Abram' … | 37.79 -122.24 | 'unicycling' 'juggling'
#>   'JoJo' …  | 37.80 -122.29 | 'acroyoga' 'juggling'
