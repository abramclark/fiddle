# haskell
data MathExpr a b = Add a b | Mul a b | Exp a b | ... | Constant Numeric | Symbol String

# taglam
(Expr, simplify) = import gralam

Unit = instance Expr

K = kelvins : Unit
m = meters : Unit
s = seconds : Unit
kg = kilograms : Unit

J = kg*m^2/s^2 = joule
P = J/m^3 = pascal = pressure

Av = 6.022140857e23 # Avogadro's constant
G = 6.67408e-11 * m^3/(kg*s) # gravitational constant
c = 299792458 * m/s # speed of light
hm = 1.616199E-35 * m # planck length
hj = 6.626070040e-34 * J*s # planck constant in Joules
eV = 1.6021766208eâˆ’19 * J # J / eV
R = 8.3144598 * J/K # molar, ideal, or universal gas constant
kb = R / Av # boltzmann constant in entropy
atm = 101325 * P

mev-to-kg = 9.0958e-31 * kg # kg / eV
lb-to-kg = 0.453592 * kg # kg / pound
inch-to-meter = .0254 * m # m / inch
feet-to-meter = inch-to-m * 12 * m # m / feet
miles-to-meter = 5280 * feet-to-m # m / mile
celsius-to-k t = (t - 273.15) * K
fahrenheit-to-celsius t = (t - 32) * 5/9
fahrenheit-to-k = celsius-to-k . fahrenheit-to-celsius

plot(f:lambda (Num, Num) (Num, Num)=identity, scale=50, interval=20) =
    ...    
